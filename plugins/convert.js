const converter = require('../data/converter');
const stickerConverter = require('../data/sticker-converter');
const { cmd } = require('../command');

cmd({
    pattern: 'photo',
    alias: ['sticker2img', 'stoimg', 'stickertoimage', 's2i'],
    desc: 'Convert stickers to images',
    category: 'media',
    react: 'üñºÔ∏è',
    filename: __filename
}, async (client, match, message, { from }) => {
    // Input validation
    if (!message.quoted) {
        return await client.sendMessage(from, {
            text: "‚ú® *Sticker Converter*\n\nPlease reply to a sticker message\n\nExample: `.convert` (reply to sticker)"
        }, { quoted: message });
    }

    if (message.quoted.mtype !== 'stickerMessage') {
        return await client.sendMessage(from, {
            text: "·¥è…¥ ü è Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ñ·¥Ä…¥  ô·¥á ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ·¥á·¥Ö"
        }, { quoted: message });
    }

    // Send processing message
    await client.sendMessage(from, {
        text: "·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ…™…¥…¢ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è …™·¥ç·¥Ä…¢·¥á..."
    }, { quoted: message });

    try {
        const stickerBuffer = await message.quoted.download();
        const imageBuffer = await stickerConverter.convertStickerToImage(stickerBuffer);

        // Send result
        await client.sendMessage(from, {
            image: imageBuffer,
            caption: "> By ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú",
            mimetype: 'image/png'
        }, { quoted: message });

    } catch (error) {
        console.error('Conversion error:', error);
        await client.sendMessage(from, {
            text: "·¥ò ü·¥á·¥ÄÍú±·¥á ·¥õ Ä è ·¥°…™·¥õ ú ·¥Ä ·¥Ö…™Íú∞Íú∞·¥á Ä·¥á…¥·¥õ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä."
        }, { quoted: message });
    }
});

cmd({
    pattern: 'tomp3',
    desc: 'Convert media to audio',
    category: 'audio',
    react: 'üéµ',
    filename: __filename
}, async (client, match, message, { from }) => {
    // Input validation
    if (!match.quoted) {
        return await client.sendMessage(from, {
            text: "*·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†…™·¥Ö·¥á·¥è/·¥Ä·¥ú·¥Ö…™·¥è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á*"
        }, { quoted: message });
    }

    if (!['videoMessage', 'audioMessage'].includes(match.quoted.mtype)) {
        return await client.sendMessage(from, {
            text: "·¥è…¥ ü è ·¥†…™·¥Ö·¥á·¥è/·¥Ä·¥ú·¥Ö…™·¥è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ñ·¥Ä…¥  ô·¥á ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ·¥á·¥Ö"
        }, { quoted: message });
    }

    if (match.quoted.seconds > 300) {
        return await client.sendMessage(from, {
            text: "·¥ç·¥á·¥Ö…™·¥Ä ·¥õ·¥è·¥è  ü·¥è…¥…¢ (·¥ç·¥Äx 5 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±)"
        }, { quoted: message });
    }

    // Send processing message and store it
    await client.sendMessage(from, {
        text: "·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è..."
    }, { quoted: message });

    try {
        const buffer = await match.quoted.download();
        const ext = match.quoted.mtype === 'videoMessage' ? 'mp4' : 'm4a';
        const audio = await converter.toAudio(buffer, ext);

        // Send result
        await client.sendMessage(from, {
            audio: audio,
            mimetype: 'audio/mpeg'
        }, { quoted: message });

    } catch (e) {
        console.error('Conversion error:', e.message);
        await client.sendMessage(from, {
            text: " Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± ·¥Ä·¥ú·¥Ö…™·¥è"
        }, { quoted: message });
    }
});

cmd({
    pattern: 'toptt',
    desc: 'Convert media to voice message',
    category: 'audio',
    react: 'üéôÔ∏è',
    filename: __filename
}, async (client, match, message, { from }) => {
    // Input validation
    if (!match.quoted) {
        return await client.sendMessage(from, {
            text: "*·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†…™·¥Ö·¥á·¥è/·¥Ä·¥ú·¥Ö…™·¥è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á*"
        }, { quoted: message });
    }

    if (!['videoMessage', 'audioMessage'].includes(match.quoted.mtype)) {
        return await client.sendMessage(from, {
            text: "·¥è…¥ ü è ·¥†…™·¥Ö·¥á·¥è/·¥Ä·¥ú·¥Ö…™·¥è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ñ·¥Ä…¥  ô·¥á ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ·¥á·¥Ö"
        }, { quoted: message });
    }

    if (match.quoted.seconds > 60) {
        return await client.sendMessage(from, {
            text: "·¥ç·¥á·¥Ö…™·¥Ä ·¥õ·¥è·¥è  ü·¥è…¥…¢ Íú∞·¥è Ä ·¥†·¥è…™·¥Ñ·¥á (·¥ç·¥Äx 1 ·¥ç…™…¥·¥ú·¥õ·¥á)"
        }, { quoted: message });
    }

    // Send processing message
    await client.sendMessage(from, {
        text: "·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á..."
    }, { quoted: message });

    try {
        const buffer = await match.quoted.download();
        const ext = match.quoted.mtype === 'videoMessage' ? 'mp4' : 'm4a';
        const ptt = await converter.toPTT(buffer, ext);

        // Send result
        await client.sendMessage(from, {
            audio: ptt,
            mimetype: 'audio/ogg; codecs=opus',
            ptt: true
        }, { quoted: message });

    } catch (e) {
        console.error('PTT conversion error:', e.message);
        await client.sendMessage(from, {
            text: "‚ùå Failed to create voice message"
        }, { quoted: message });
    }
});
