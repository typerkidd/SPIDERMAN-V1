
//  ‚ö†Ô∏è DO NOT MODIFY THIS FILE ‚ö†Ô∏è  
//---------------------------------------------------------------------------
const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions2');
const { writeFileSync } = require('fs');
const path = require('path');

// Helper function to send responses with newsletter info
async function sendResponse(conn, from, replyText, quotedMsg) {
    await conn.sendMessage(from, { 
        image: { url: `https://files.catbox.moe/u9noai.jpg` },  
        caption: replyText,
        contextInfo: {
            mentionedJid: [quotedMsg.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: 'https://files.catbox.moe/m4vltm.jpg',
                newsletterName: 'üÜÉÔ∏éüÖ¥Ô∏éüÖ≤Ô∏éüÖ∑Ô∏é-üÖ≥Ô∏éüÖ¥Ô∏éüÜÖÔ∏éüÜÇÔ∏é',
                serverMessageId: 143
            }
        }
    }, { quoted: quotedMsg });
}

cmd({
    pattern: "adminevents",
    alias: ["adminevents"],
    desc: "Enable or disable admin event notifications",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.ADMIN_EVENTS = "true";
        return await sendResponse(conn, from, "‚úÖ Admin event notifications are now enabled.", m);
    } else if (status === "off") {
        config.ADMIN_EVENTS = "false";
        return await sendResponse(conn, from, "‚ùå Admin event notifications are now disabled.", m);
    } else {
        return await sendResponse(conn, from, `Example: .admin-events on`, m);
    }
});

cmd({
    pattern: "welcome",
    alias: ["welcomeset"],
    desc: "Enable or disable welcome messages for new members",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "* ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.WELCOME = "true";
        return await sendResponse(conn, from, " ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.", m);
    } else if (status === "off") {
        config.WELCOME = "false";
        return await sendResponse(conn, from, "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.", m);
    } else {
        return await sendResponse(conn, from, `Example: .welcome on`, m);
    }
});

cmd({
    pattern: "setprefix",
    alias: ["prefix"],
    react: "üîß",
    desc: "Change the bot's command prefix.",
    category: "settings",
    filename: __filename,
}, async (message, match, { from, args, isCreator, reply }) => {
    if (!isCreator) return await message.sendMessage("* ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const newPrefix = args[0];
    if (!newPrefix) return await message.sendMessage("·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä …¥·¥á·¥° ·¥ò Ä·¥áÍú∞…™x. ·¥áx·¥Ä·¥ç·¥ò ü·¥á: `.Íú±·¥á·¥õ·¥ò Ä·¥áÍú∞…™x !");

    // Update config in memory
    config.PREFIX = newPrefix;
    
    // Update config file permanently
    try {
        const configPath = path.join(__dirname, '../config.js');
        let configFile = fs.readFileSync(configPath, 'utf8');
        configFile = configFile.replace(
            /PREFIX:.*?(,|})/,
            `PREFIX: "${newPrefix}"$1`
        );
        fs.writeFileSync(configPath, configFile);
        return await message.sendMessage(`‚úÖ Prefix successfully changed to *${newPrefix}*`);
    } catch (error) {
        console.error('Error updating prefix:', error);
        return await message.sendMessage("‚ùå Failed to update prefix in config file.");
    }
});

cmd({
    pattern: "mode",
    alias: ["setmode"],
    react: "ü´ü",
    desc: "Set bot mode to private or public.",
    category: "settings",
    filename: __filename,
}, async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "* ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (!args[0]) {
        return await sendResponse(conn, from, `üìå Current mode: *${config.MODE}*\n\nUsage: .mode private OR .mode public`, m);
    }

    const modeArg = args[0].toLowerCase();
    if (modeArg === "private") {
        config.MODE = "private";
        return await sendResponse(conn, from, " ô·¥è·¥õ ·¥ç·¥è·¥Ö·¥á …™Íú± …¥·¥è·¥° Íú±·¥á·¥õ ·¥õ·¥è *·¥ò Ä…™·¥†·¥Ä·¥õ·¥á*.", m);
    } else if (modeArg === "public") {
        config.MODE = "public";
        return await sendResponse(conn, from, " ô·¥è·¥õ ·¥ç·¥è·¥Ö·¥á …™Íú± …¥·¥è·¥° Íú±·¥á·¥õ ·¥õ·¥è *·¥ò·¥ú ô ü…™·¥Ñ*.", m);
    } else {
        return await sendResponse(conn, from, "‚ùå Invalid mode. Please use `.mode private` or `.mode public`.", m);
    }
});

cmd({
    pattern: "autotyping",
    description: "Enable or disable auto-typing feature.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "* ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    const status = args[0]?.toLowerCase();
    if (!["on", "off"].includes(status)) {
        return await sendResponse(conn, from, "*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .·¥Ä·¥ú·¥õ·¥è-·¥õ è·¥ò…™…¥…¢ ·¥è…¥*", m);
    }

    config.AUTO_TYPING = status === "on" ? "true" : "false";
    return await sendResponse(conn, from, `·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥õ·¥ú Ä…¥·¥á·¥Ö ${status}.`, m);
});

cmd({
    pattern: "mentionreply",
    alias: ["menetionreply", "mee"],
    description: "Set bot status to always online or offline.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.MENTION_REPLY = "true";
        return await sendResponse(conn, from, "Mention Reply feature is now enabled.", m);
    } else if (args[0] === "off") {
        config.MENTION_REPLY = "false";
        return await sendResponse(conn, from, "Mention Reply feature is now disabled.", m);
    } else {
        return await sendResponse(conn, from, `_example:  .mee on_`, m);
    }
});

cmd({
    pattern: "alwaysonline",
    alias: ["alwaysonline"],
    desc: "Enable or disable the always online mode",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.ALWAYS_ONLINE = "true";
        await sendResponse(conn, from, "*·¥Ä ü·¥°·¥Ä èÍú± ·¥è…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á …™Íú± …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (status === "off") {
        config.ALWAYS_ONLINE = "false";
        await sendResponse(conn, from, "*·¥Ä ü·¥°·¥Ä èÍú± ·¥è…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á …™Íú± …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        await sendResponse(conn, from, `*üõ†Ô∏è ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä ü·¥°·¥Ä ès-·¥è…¥ ü…™…¥·¥á ·¥è…¥*`, m);
    }
});

cmd({
    pattern: "autorecording",
    alias: ["autorecoding"],
    description: "Enable or disable auto-recording feature.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    const status = args[0]?.toLowerCase();
    if (!["on", "off"].includes(status)) {
        return await sendResponse(conn, from, "*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥è…¥*", m);
    }

    config.AUTO_RECORDING = status === "on" ? "true" : "false";
    if (status === "on") {
        await conn.sendPresenceUpdate("recording", from);
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢ …™Íú± …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*  ô·¥è·¥õ …™Íú±  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢...", m);
    } else {
        await conn.sendPresenceUpdate("available", from);
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    }
});

cmd({
    pattern: "autoseen",
    alias: ["autostatusview"],
    desc: "Enable or disable auto-viewing of statuses",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_STATUS_SEEN = "true";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-·¥†…™·¥á·¥°…™…¥…¢ ·¥èf s·¥õ·¥Ä·¥õ·¥ús·¥ás …™Íú± …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_STATUS_SEEN = "false";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-·¥†…™·¥á·¥°…™…¥…¢ ·¥èf s·¥õ·¥Ä·¥õ·¥ús·¥ás  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .·¥Ä·¥ú·¥õ·¥è-s·¥á·¥á…¥ ·¥è…¥*`, m);
    }
}); 

cmd({
    pattern: "statusreact",
    alias: ["autostatusreact"],
    desc: "Enable or disable auto-liking of statuses",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_STATUS_REACT = "true";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- ü…™·¥ã…™…¥…¢ ·¥èf s·¥õ·¥Ä·¥õ·¥ús·¥ás …™Íú± …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_STATUS_REACT = "false";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- ü…™·¥ã…™…¥…¢ ·¥èf s·¥õ·¥Ä·¥õ·¥ús·¥ás  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `*üõ†Ô∏è ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .status-react on*`, m);
    }
});

cmd({
    pattern: "readmessage",
    alias: ["autoread"],
    desc: "enable or disable readmessage.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.READ_MESSAGE = "true";
        return await sendResponse(conn, from, "* Ä·¥á·¥Ä·¥Ö·¥ç·¥áss·¥Ä…¢·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.READ_MESSAGE = "false";
        return await sendResponse(conn, from, "* Ä·¥á·¥Ä·¥Ö·¥ç·¥áss·¥Ä…¢·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `_example:  .readmessage on_`, m);
    }
});

cmd({
    pattern: "autovoice",
    alias: ["autovoice"],
    desc: "enable or disable readmessage.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_VOICE = "true";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-·¥†·¥è…™·¥Ñ…™…¥…¢ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_VOICE = "false";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-·¥†·¥è…™·¥Ñ…™…¥…¢ …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `_example:  .autovoice on_`, m);
    }
});

cmd({
    pattern: "antibad",
    alias: ["antibadword"],
    desc: "enable or disable antibad.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.ANTI_BAD_WORD = "true";
        return await sendResponse(conn, from, "*·¥Ä…¥·¥õ…™- ô·¥Ä·¥Ö-·¥°·¥è Ä·¥Ö …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.ANTI_BAD_WORD = "false";
        return await sendResponse(conn, from, "*·¥Ä…¥·¥õ…™- ô·¥Ä·¥Ö-·¥°·¥è Ä·¥Ö …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `_example:  .antibad on_`, m);
    }
});

cmd({
    pattern: "autosticker",
    alias: ["autosticker"],
    desc: "enable or disable auto-sticker.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_STICKER = "true";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_STICKER = "false";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è-Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `_example:  .auto-sticker on_`, m);
    }
});

cmd({
    pattern: "autoreply",
    alias: ["autoreply"],
    desc: "enable or disable auto-reply.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_REPLY = "true";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥ò ü è …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_REPLY = "false";
        return await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥ò ü è …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: . ·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥ò ü è ·¥è…¥*`, m);
    }
});

cmd({
    pattern: "autoreact",
    alias: ["autoreact"],
    desc: "Enable or disable the autoreact feature",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_REACT = "true";
        await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ä·¥Ñ·¥õ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_REACT = "false";
        await sendResponse(conn, from, "*·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ä·¥Ñ·¥õ …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        await sendResponse(conn, from, `*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ä·¥Ñ·¥õ ·¥è…¥*`, m);
    }
});

cmd({
    pattern: "statusreply",
    alias: ["autostatusreply"],
    desc: "enable or disable status-reply.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return await sendResponse(conn, from, "*·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*", m);

    if (args[0] === "on") {
        config.AUTO_STATUS_REPLY = "true";
        return await sendResponse(conn, from, "*s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
        config.AUTO_STATUS_REPLY = "false";
        return await sendResponse(conn, from, "*s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
        return await sendResponse(conn, from, `*·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è ·¥è…¥*`, m);
    }
});

cmd({
  pattern: "antilink",
  alias: ["antilinks"],
  desc: "Enable or disable ANTI_LINK in groups",
  category: "group",
  react: "üö´",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, from, reply }) => {
  try {
    if (!isGroup) return await sendResponse(conn, from, '·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥úÍú±·¥á·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.', m);
    if (!isBotAdmins) return await sendResponse(conn, from, ' ô·¥è·¥õ ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);
    if (!isAdmins) return await sendResponse(conn, from, ' è·¥è·¥ú ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);

    if (args[0] === "on") {
      config.ANTI_LINK = "true";
      await sendResponse(conn, from, "*ANTI_LINK …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
      config.ANTI_LINK = "false";
      await sendResponse(conn, from, "*ANTI_LINK …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
      await sendResponse(conn, from, "Usage: *.antilink on/off*", m);
    }
  } catch (e) {
    await sendResponse(conn, from, `Error: ${e.message}`, m);
  }
});

cmd({
  pattern: "antilinkkick",
  alias: ["kicklink"],
  desc: "Enable or disable ANTI_LINK_KICK in groups",
  category: "group",
  react: "‚ö†Ô∏è",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, from, reply }) => {
  try {
    if (!isGroup) return await sendResponse(conn, from, '·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥úÍú±·¥á·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.', m);
    if (!isBotAdmins) return await sendResponse(conn, from, ' ô·¥è·¥õ ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);
    if (!isAdmins) return await sendResponse(conn, from, ' è·¥è·¥ú ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);

    if (args[0] === "on") {
      config.ANTI_LINK_KICK = "true";
      await sendResponse(conn, from, "* ANTI_LINK_KICK …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
      config.ANTI_LINK_KICK = "false";
      await sendResponse(conn, from, "*‚ùå ANTI_LINK_KICK …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
      await sendResponse(conn, from, "Usage: *.antilinkkick on/off*", m);
    }
  } catch (e) {
    await sendResponse(conn, from, `Error: ${e.message}`, m);
  }
});

cmd({
  pattern: "deletelink",
  alias: ["linksdelete"],
  desc: "Enable or disable DELETE_LINKS in groups",
  category: "group",
  react: "‚ùå",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, from, reply }) => {
  try {
    if (!isGroup) return await sendResponse(conn, from, '·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥úÍú±·¥á·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.', m);
    if (!isBotAdmins) return await sendResponse(conn, from, ' ô·¥è·¥õ ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);
    if (!isAdmins) return await sendResponse(conn, from, ' è·¥è·¥ú ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.', m);

    if (args[0] === "on") {
      config.DELETE_LINKS = "true";
      await sendResponse(conn, from, "*DELETE_LINKS …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*", m);
    } else if (args[0] === "off") {
      config.DELETE_LINKS = "false";
      await sendResponse(conn, from, "*DELETE_LINKS …™s …¥·¥è·¥° ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.*", m);
    } else {
      await sendResponse(conn, from, "Usage: *.deletelink on/off*", m);
    }
  } catch (e) {
    await sendResponse(conn, from, `Error: ${e.message}`, m);
  }
});
